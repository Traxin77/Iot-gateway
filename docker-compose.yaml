version: '3.8'

services:
  go-iot-gateway:
    build: ./iot-go-gateway
    container_name: go-iot-gateway
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - ./iot-go-gateway/config.yaml:/app/config.yaml # Assuming Dockerfile copies app to /app
      - ./certs/server.crt:/app/certs/server.crt:ro # Mount server certificate
      - ./certs/server.key:/app/certs/server.key:ro # Mount server key
      # Optional: Mount CA cert if Go needs to verify client certs (mTLS) or broker certs
      # - ./certs/ca.crt:/app/certs/ca.crt:ro
    environment:
      # CONFIG_PATH needs to match where config.yaml is in the container
      - CONFIG_PATH=/app
      # GATEWAY_API_KEY loaded from .env file or environment
      - GATEWAY_API_KEY=${GATEWAY_API_KEY}
      # Pass cert paths via env vars (or use flags as currently in main.go)
      - CERT_FILE=/app/certs/server.crt
      - KEY_FILE=/app/certs/server.key
    networks:
      - iot-network
    restart: unless-stopped

  coap-to-http:
    build: ./coap-http
    container_name: coap-http-bridge
    ports:
      - "5683:5683/udp"
    environment:
      # Updated to HTTPS and correct data port (8080)
      - HTTP_ENDPOINT=https://go-iot-gateway:8080/data
      - GATEWAY_API_KEY=${GATEWAY_API_KEY} # Load from .env file or environment
      # Add variables for DTLS if implemented
    networks:
      - iot-network
    restart: unless-stopped
    depends_on:
      - go-iot-gateway

  websocket-to-http:
    build: ./websocket-http
    container_name: websocket-http-bridge
    ports:
      - "8765:8765" # WSS Port (can be same as Go UI/WS if desired, depends on setup)
    environment:
      # Updated to correct data port (8080)
      - HTTP_ENDPOINT=https://go-iot-gateway:8080/data
      - GATEWAY_API_KEY=${GATEWAY_API_KEY} # Load from .env file or environment
      - WS_PORT=8765 # Internal port for the python server
      # Paths inside the container for WSS certificates
      - WS_CERT_FILE=/certs/server.crt
      - WS_KEY_FILE=/certs/server.key
    volumes:
      # Mount certs for WSS into the container
      - ./certs/server.crt:/certs/server.crt:ro
      - ./certs/server.key:/certs/server.key:ro
    networks:
      - iot-network
    restart: unless-stopped
    depends_on:
      - go-iot-gateway

  modbus-to-http:
    build: ./modbus-http
    container_name: modbus-http-bridge
    environment:
      # Updated to HTTPS and correct data port (8080)
      - HTTP_ENDPOINT=https://go-iot-gateway:8080/data
      - GATEWAY_API_KEY=${GATEWAY_API_KEY} # Load from .env file or environment
      - MODBUS_IP=your_modbus_device_ip # Needs configuration
      - MODBUS_PORT=502
      # Optional Modbus config
      # - MODBUS_SLAVE_ID=1
      # - POLL_INTERVAL=10
    networks:
      # This network needs access to the Modbus device IP
      - iot-network
    restart: unless-stopped
    depends_on:
      - go-iot-gateway

  mqtt-to-http:
    build: ./mqtt-http
    container_name: mqtt-http-bridge
    environment:
      # Updated to HTTPS and correct data port (8080)
      - HTTP_ENDPOINT=https://go-iot-gateway:8080/data
      # Updated to MQTTS and TLS port 8883
      - MQTT_SERVER=mqtts://mqtt-broker:8883
      - MQTT_TOPIC=sensor/dht11 # Or your desired topic(s)
      - GATEWAY_API_KEY=${GATEWAY_API_KEY} # Load from .env file or environment
      # MQTT Auth/TLS configuration from .env file or environment
      - MQTT_USER=${MQTT_USER}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_CA_CERT=/certs/ca.crt # Path inside container if using CA cert
      # Optional: Client certs for MQTT mTLS
      # - MQTT_CLIENT_ID=mqtt-http-bridge
      # - MQTT_CERT_FILE=/certs/client.crt
      # - MQTT_KEY_FILE=/certs/client.key
    volumes:
      # Mount CA cert needed for MQTT TLS verification
      - ./certs/ca.crt:/certs/ca.crt:ro
      # Optional: Mount client certs if needed for MQTT mTLS
      # - ./certs/client.crt:/certs/client.crt:ro
      # - ./certs/client.key:/certs/client.key:ro
    networks:
      - iot-network
    restart: unless-stopped
    depends_on:
      - mqtt-broker
      - go-iot-gateway

  mqtt-broker:
    image: eclipse-mosquitto:2.0 # Use version 2+ for better TLS/Auth features
    container_name: mqtt-broker
    ports:
      # - "1883:1883" # Optional: Keep plain MQTT if needed for legacy clients
      - "8883:8883" # MQTT over TLS (Configured in mosquitto.conf)
      # - "9001:9001" # Optional: MQTT over WebSockets
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf:ro # Mount custom config
      - ./mosquitto_passwd:/mosquitto/config/mosquitto_passwd:ro # Mount password file
      - ./certs/server.crt:/mosquitto/certs/server.crt:ro # Mount broker certificate
      - ./certs/server.key:/mosquitto/certs/server.key:ro # Mount broker key
      - ./certs/ca.crt:/mosquitto/certs/ca.crt:ro       # Mount CA certificate
      - ./mosquitto/log:/mosquitto/log # Mount log directory (optional)
      - ./mosquitto/data:/mosquitto/data # Mount data directory (optional, for persistence)
    networks:
      - iot-network
    restart: unless-stopped

networks:
  iot-network:
    driver: bridge
# --- End docker-compose.yaml ---